name: semver

on:
  push:
    branches: [ 'semver', 'dev/semver', 'master' ]
  pull_request:
    types: [ 'closed' ]
    branches: [ 'semver' ]

jobs:
  TestSemver:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.17', '1.18', '1.19', '1.20', '1.21', 'stable' ]
    name: Test with Go ${{ matrix.go }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go env
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go }}
    - name: Run tests
      run: |
        go version
        cd ./semver
        go test -cover -coverprofile=../coverage_semver.txt -v .
        cd ..
    - name: Codecov
      uses: codecov/codecov-action@v3
      with:
        flags: semver
        name: semver
  
  ReleaseDryRun:
    runs-on: ubuntu-latest
    needs: [ 'TestSemver' ]
    outputs:
      RESULT: ${{ steps.semrelease.outputs.result }}
      VERSION: ${{ steps.semrelease.outputs.releaseVersion }}
      RELEASE_NOTES: ${{ steps.semrelease.outputs.releaseNotes }}
    steps:
    - uses: actions/checkout@v3
    - name: Release (dry-run)
      id: semrelease
      uses: btnguyen2k/action-semrelease@v3
      with:
        dry-run: true
        auto-mode: true
        github-token: ${{ secrets.GITHUB_TOKEN }}
        tag-major-release: false
        tag-minor-release: false
        branches: semver,dev/semver
        tag-prefix: 'semver/v'

  UpdateModuleMeta:
    runs-on: ubuntu-latest
    needs: [ 'ReleaseDryRun' ]
    steps:
    - name: Update module meta
      run: |
        RESULT='${{ needs.ReleaseDryRun.outputs.RESULT }}'
        VERSION='${{ needs.ReleaseDryRun.outputs.VERSION }}'
        RELEASE_NOTES='${{ needs.ReleaseDryRun.outputs.RELEASE_NOTES }}'
        echo "Updating module meta..."
        echo "  - RESULT: ${RESULT}"
        echo "  - VERSION: ${VERSION}"
        echo "  - RELEASE_NOTES: ${RELEASE_NOTES}"
        if [ "${RESULT}" == "SUCCESS" ]; then
          DATE=`date +%Y-%m-%d`
        else
          echo "SKIPPED."
        fi
